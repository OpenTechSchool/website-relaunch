'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scriptToObject = scriptToObject;
exports.default = getScriptByPrefix;

var _prefixMatches = require('prefix-matches');

var _prefixMatches2 = _interopRequireDefault(_prefixMatches);

var _lodash = require('lodash');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
  Converts a string or object with a "script" key into an object with
   {
    name,
    script,
    description
   }
*/
function scriptToObject(name, scriptArg) {
  if ((0, _lodash.isString)(scriptArg)) {
    return {
      name,
      script: scriptArg,
      description: ''
    };
  }
  if ((0, _lodash.isPlainObject)(scriptArg)) {
    if ((0, _lodash.has)(scriptArg, 'default')) {
      return scriptToObject(`${name}.default`, scriptArg.default);
    } else {
      var description = scriptArg.description || '';
      var script = scriptArg.script;
      return {
        name,
        description,
        script
      };
    }
  }
  return null;
}

function isValidScript(script) {
  if ((0, _lodash.isString)(script)) {
    return true;
  } else if ((0, _lodash.isPlainObject)(script)) {
    if ((0, _lodash.has)(script, 'default')) {
      return isValidScript(script.default);
    }
    return (0, _lodash.has)(script, 'script');
  } else {
    return false;
  }
}

function getScriptByPrefix(_ref, prefix) {
  var scripts = _ref.scripts;

  var matches = (0, _prefixMatches2.default)(prefix, scripts);
  // This array holds all the valid scripts in
  // the order of priority (default scripts have lowest priority)
  var matchedScriptsSortedByPriority = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = matches[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var match = _step.value;

      var matchedKeys = (0, _lodash.keys)(match);
      var name = matchedKeys[0];
      var script = match[name];
      if (isValidScript(script)) {
        if ((0, _lodash.has)(script, 'default')) {
          // if it's a default script, push to the last of the array
          matchedScriptsSortedByPriority.push({
            name,
            script
          });
        } else {
          // if it's not a default script, push to the first of the array
          matchedScriptsSortedByPriority.unshift({
            name,
            script
          });
        }
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  if (matchedScriptsSortedByPriority.length) {
    var _matchedScriptsSorted = matchedScriptsSortedByPriority[0],
        name = _matchedScriptsSorted.name,
        script = _matchedScriptsSorted.script;

    return scriptToObject(name, script);
  }
  return null;
}