'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _lodash = require('lodash');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

var excludedKeys = ['default', 'script', 'description', 'hiddenFromHelp'];

exports.default = getScripts;


function getScripts(objWithScripts) {
  var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

  var _prefix$split = prefix.split('.'),
      _prefix$split2 = _toArray(_prefix$split),
      prefixToMatch = _prefix$split2[0],
      remainingToMatch = _prefix$split2.slice(1);

  return Object.keys(objWithScripts).reduce(function (acc, key) {
    /* eslint complexity:0 */
    var kebabKey = (0, _lodash.kebabCase)(key);
    var camelKey = (0, _lodash.camelCase)(key);
    var startsWithKey = (0, _lodash.startsWith)(key, prefixToMatch);
    var startsWithKebab = (0, _lodash.startsWith)(kebabKey, prefixToMatch);
    var startsWithCamel = (0, _lodash.startsWith)(camelKey, prefixToMatch);
    var startMatches = startsWithKey || startsWithKebab || startsWithCamel;
    if (!startMatches || (0, _lodash.includes)(excludedKeys, key)) {
      return acc;
    }
    var value = objWithScripts[key];

    // default to kebab-case
    // eslint-disable-next-line
    var keyToPush = !isKebab(prefixToMatch) ? camelKey : kebabKey;

    if ((0, _lodash.isPlainObject)(value)) {
      if ((value.default || value.script) && !remainingToMatch.length) {
        acc.push(keyToPush);
      }
      var subscripts = getScripts(value, remainingToMatch.join('.')).map(function (scriptName) {
        return `${keyToPush}.${scriptName}`;
      });
      acc = [].concat(_toConsumableArray(acc), _toConsumableArray(subscripts));
    } else if (!remainingToMatch.length) {
      acc.push(keyToPush);
    }
    return acc;
  }, []);
}

function isKebab(str) {
  return (0, _lodash.includes)(str, '-');
}