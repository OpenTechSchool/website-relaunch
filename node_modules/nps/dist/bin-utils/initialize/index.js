'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _path = require('path');

var _fs = require('fs');

var _findUp = require('find-up');

var _lodash = require('lodash');

var _jsYaml = require('js-yaml');

var _stringifyObject = require('./stringify-object');

var _stringifyObject2 = _interopRequireDefault(_stringifyObject);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

exports.default = initialize;


var CORE_SCRIPTS = ['applypatchmsg', 'commitmsg', 'install', 'postapplypatch', 'postcheckout', 'postcommit', 'postinstall', 'postmerge', 'postpublish', 'postreceive', 'postrestart', 'postrewrite', 'poststart', 'poststop', 'posttest', 'postuninstall', 'postupdate', 'postversion', 'preapplypatch', 'preautogc', 'precommit', 'preinstall', 'preparecommitmsg', 'prepublish', 'prepush', 'prerebase', 'prereceive', 'prerestart', 'prestart', 'prestop', 'pretest', 'preuninstall', 'preversion', 'publish', 'pushtocheckout', 'restart', 'stop', 'uninstall', 'update', 'version'];

function initialize() {
  var configType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'js';

  /* eslint global-require:0,import/no-dynamic-require:0 */
  var packageJsonPath = (0, _findUp.sync)('package.json');
  var packageJson = require(packageJsonPath);
  var _packageJson$scripts = packageJson.scripts,
      scripts = _packageJson$scripts === undefined ? {} : _packageJson$scripts;

  packageJson.scripts = getCoreScripts(packageJson.scripts);
  (0, _fs.writeFileSync)(packageJsonPath, JSON.stringify(packageJson, null, 2));

  if (configType === 'yaml') {
    return dumpYAMLConfig(packageJsonPath, scripts);
  }

  return dumpJSConfig(packageJsonPath, scripts);
}

function dumpJSConfig(packageJsonPath, scripts) {
  var packageScriptsPath = (0, _path.resolve)((0, _path.dirname)(packageJsonPath), './package-scripts.js');
  var fileContents = generatePackageScriptsFileContents(scripts);
  (0, _fs.writeFileSync)(packageScriptsPath, fileContents);

  return { packageJsonPath, packageScriptsPath };
}

function dumpYAMLConfig(packageJsonPath, scripts) {
  var packageScriptsPath = (0, _path.resolve)((0, _path.dirname)(packageJsonPath), './package-scripts.yml');
  var fileContents = (0, _jsYaml.safeDump)({ scripts: structureScripts(scripts) });
  (0, _fs.writeFileSync)(packageScriptsPath, fileContents);

  return { packageJsonPath, packageScriptsPath };
}

function generatePackageScriptsFileContents(scripts) {
  var indent = '    '; // start at 4 spaces because we're inside another object
  var structuredScripts = structureScripts(scripts);
  var objectString = (0, _stringifyObject2.default)(structuredScripts, indent);
  return `module.exports = {\n  scripts: {${objectString}\n  }\n};\n`;
}

function structureScripts(scripts) {
  // start out by giving every script a `default`
  var defaultedScripts = Object.keys(scripts).filter(isNotCoreScript).reduce(function (obj, scriptKey) {
    var keyParts = scriptKey.split(':');
    var isKeyScriptHook = isScriptHook(keyParts[0]);
    var deepKey = convertToNpsScript(keyParts);
    var defaultDeepKey = `${deepKey}.default`;
    if (scriptKey.indexOf('start') === 0) {
      defaultDeepKey = ['default'].concat(_toConsumableArray(keyParts.slice(1, keyParts.length)), ['default']).join('.');
    }
    var script = scripts[scriptKey];
    if (!isKeyScriptHook) {
      var _getPrePostHooks = getPrePostHooks(scripts, scriptKey, deepKey),
          preHook = _getPrePostHooks.preHook,
          postHook = _getPrePostHooks.postHook;

      if (isNpmRunCommand(script)) {
        script = convertToNpsCommand(script);
      }
      script = `${preHook}${script}${postHook}`;
    }
    (0, _lodash.set)(obj, defaultDeepKey, script);
    return obj;
  }, {});
  // traverse the object and replace all objects that
  // only have `default` with just the script itself.
  traverse(defaultedScripts, removeDefaultOnly);
  return defaultedScripts;

  function removeDefaultOnly(key, value, object) {
    if (isOnlyDefault(value)) {
      object[key] = value.default;
    }
  }
}

function traverse(object, fn) {
  (0, _lodash.each)(object, function (value, key) {
    // we don't need to worry about a recursive structure in this case
    fn(key, value, object);
    value = object[key]; // may have changed from `fn`
    if ((0, _lodash.isPlainObject)(value)) {
      traverse(value, fn);
    }
  });
}

function getCoreScripts() {
  var scripts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var DEFAULT_CORE_SCRIPTS = {
    start: 'nps',
    test: scripts.test ? 'nps test' : undefined
  };
  var coreScripts = Object.keys(scripts).reduce(function (result, scriptKey) {
    if (!isNotCoreScript(scriptKey)) {
      result[scriptKey] = scripts[scriptKey];
    }
    return result;
  }, {});
  return Object.assign(DEFAULT_CORE_SCRIPTS, coreScripts);
}

function convertToNpsCommand(npmRunCommand) {
  var _npmRunCommand$split = npmRunCommand.split(' '),
      _npmRunCommand$split2 = _toArray(_npmRunCommand$split),
      commandToRun = _npmRunCommand$split2[2],
      args = _npmRunCommand$split2.slice(4);

  var hasArgs = args.length > 0;
  var npsScript = convertToNpsScript(commandToRun.split(':'));
  if (hasArgs) {
    var npsScriptArgs = args.join(' ');
    npsScript = `"${npsScript} ${npsScriptArgs}"`;
  }
  return `nps ${npsScript}`;
}

function getPrePostHooks(scripts, scriptKey, deepKey) {
  var preHook = scripts[`pre${scriptKey}`] ? `nps pre${deepKey} && ` : '';
  var postHook = scripts[`post${scriptKey}`] ? ` && nps post${deepKey}` : '';
  return {
    preHook,
    postHook
  };
}

function convertToNpsScript(keyParts) {
  return keyParts.map(function (key) {
    return (0, _lodash.camelCase)(key);
  }).join('.');
}

function isOnlyDefault(script) {
  return (0, _lodash.isPlainObject)(script) && Object.keys(script).length === 1 && script.default;
}

function isScriptHook(script) {
  return script.indexOf('pre') === 0 || script.indexOf('post') === 0;
}

function isNotCoreScript(script) {
  return !(0, _lodash.includes)(CORE_SCRIPTS, script);
}

function isNpmRunCommand(script) {
  return (0, _lodash.startsWith)(script.trim(), 'npm run');
}