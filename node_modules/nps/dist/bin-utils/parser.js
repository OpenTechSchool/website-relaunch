'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _findUp = require('find-up');

var _findUp2 = _interopRequireDefault(_findUp);

var _yargs = require('yargs/yargs');

var _yargs2 = _interopRequireDefault(_yargs);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _readlineSync = require('readline-sync');

var _lodash = require('lodash');

var _commonTags = require('common-tags');

var _getLogger = require('../get-logger');

var _getLogger2 = _interopRequireDefault(_getLogger);

var _binUtils = require('../bin-utils');

var _autocompleteGetScripts = require('./autocomplete-get-scripts');

var _autocompleteGetScripts2 = _interopRequireDefault(_autocompleteGetScripts);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var log = (0, _getLogger2.default)();
exports.default = parse;


function parse(rawArgv) {
  var _yargsInstance$usage$;

  var commandExecuted = false;

  var configOption = {
    describe: _commonTags.oneLine`
      Config file to use (defaults to nearest package-scripts.yml
      or package-scripts.js)
    `,
    alias: 'c',
    default: getPSConfigFilepath()
  };

  var baseOptions = {
    config: configOption,
    silent: {
      describe: 'Silent nps output',
      alias: 's',
      type: 'boolean',
      default: false
    },
    'log-level': {
      describe: 'The log level to use',
      choices: ['error', 'warn', 'info', 'debug'],
      alias: 'l',
      default: 'info'
    },
    require: {
      describe: 'Module to preload',
      alias: 'r',
      default: undefined
    },
    scripts: {
      describe: 'Log command text for script',
      type: 'boolean',
      default: true
    },
    'help-style': {
      describe: 'Choose the level of detail displayed by the help command',
      choices: ['all', 'scripts', 'basic'],
      alias: 'y',
      default: 'all'
    }
  };

  var yargsInstance = (0, _yargs2.default)(rawArgv);

  var parser = (_yargsInstance$usage$ = yargsInstance.usage('Usage: $0 [options] <script>...').example('$0 test build', 'Runs the `test` script then the `build` script').example('$0 "test --cover" "build --prod"', _commonTags.oneLine`
        Runs the \`test\` script and forwards the "--cover" flag
        then the \`build\` script and forwards the "--prod" flag
      `).help(false).alias('h', 'help').version().alias('v', 'version').options(baseOptions)).command.apply(_yargsInstance$usage$, _toConsumableArray(getInitCommand())).completion('completion', completionHandler).exitProcess(shouldExitProcess());

  var parsedArgv = parser.parse(rawArgv);

  if (commandExecuted) {
    return undefined;
  }

  var invalidFlags = getInvalidFlags();
  if (invalidFlags.length) {
    log.error({
      message: _chalk2.default.red(_commonTags.oneLine`
          You provided one or more invalid flags:
          ${invalidFlags.join(', ')}\n
          Did you forget to put your command in quotes?
        `),
      ref: 'invalid-flags'
    });
    throw new Error(`invalid flag(s) passed: ${invalidFlags}`);
  }

  var psConfig = getPSConfig(parsedArgv);

  if (!psConfig) {
    return undefined;
  }

  if (showHelp(parsedArgv._)) {
    return undefined;
  }

  return { argv: parsedArgv, psConfig

    // util functions

    // eslint-disable-next-line complexity
  };function showHelp(specifiedScripts) {
    if (parsedArgv.help) {
      // if --help was specified, then yargs will show the default help
      log.info((0, _binUtils.help)(psConfig));
      return true;
    }
    var helpStyle = String(psConfig.options['help-style']);
    var hasDefaultScript = Boolean(psConfig.scripts.default);
    var noScriptSpecifiedAndNoDefault = !specifiedScripts.length && !hasDefaultScript;
    var hasHelpScript = Boolean(psConfig.scripts.help);
    var commandIsHelp = (0, _lodash.isEqual)(specifiedScripts[0], 'help') && !hasHelpScript;
    var shouldShowSpecificScriptHelp = commandIsHelp && specifiedScripts.length > 1;
    if (shouldShowSpecificScriptHelp) {
      log.info((0, _binUtils.specificHelpScript)(psConfig, specifiedScripts[1]));
      return true;
    } else if (commandIsHelp || noScriptSpecifiedAndNoDefault) {
      // Can't achieve 100% branch coverage without refactoring this showHelp()
      // function into ./index.js and re-working existing tests and such. Branch
      // options aren't relevant here either, so telling Istanbul to ignore.
      /* istanbul ignore next */
      if (helpStyle === 'all') {
        parser.showHelp('log');
      }
      log.info((0, _binUtils.help)(psConfig));
      return true;
    }

    return false;
  }

  function getInitCommand() {
    var command = 'init';
    var description = 'automatically migrate from npm scripts to nps';
    return [command, description, getConfig, onInit];

    function getConfig(initYargs) {
      return initYargs.usage('Usage: $0 init [options]').options({
        config: configOption,
        type: {
          describe: 'The type of config to generate',
          choices: ['js', 'yml'],
          default: 'js'
        }
      });
    }

    function onInit(initArgv) {
      commandExecuted = true;
      var path = getPSConfigFilepath(initArgv);
      var fileExists = typeof path === 'string' && Boolean(_findUp2.default.sync(path));
      if (fileExists) {
        if (!(0, _readlineSync.keyInYN)(_chalk2.default.yellow(`Do you want to overwrite your existing config file?`))) {
          log.info(_chalk2.default.yellow(`Exiting. Please specify a different config file to use on init.`));
          return;
        }
      }

      var _initialize = (0, _binUtils.initialize)(initArgv.type),
          packageScriptsPath = _initialize.packageScriptsPath;

      log.info(`Your scripts have been saved at ${_chalk2.default.green(packageScriptsPath)}`);
      log.info(_chalk2.default.gray(_commonTags.oneLine`
            Check out your scripts in there. Go ahead and
            update them and add descriptions to the ones
            that need it
          `));
      log.info(_chalk2.default.gray(_commonTags.oneLine`
            Your package.json scripts have also been updated. Run
            \`npm start help\` for help
          `));
      log.info(_chalk2.default.gray(_commonTags.oneLine`
            You may also want to install the package globally and
            installing autocomplete script. You can do so by running
            \n  npm install --global nps
            \n  nps completion >> <your-bash-profile-file>
          `));
    }
  }

  /* istanbul ignore next */
  function completionHandler(currentInput, currentArgv) {
    commandExecuted = true;

    var _ref = getPSConfig(currentArgv) || {},
        scripts = _ref.scripts;

    if (scripts) {
      return (0, _autocompleteGetScripts2.default)(scripts, currentInput);
    }
    return [];
  }

  function getInvalidFlags() {
    var customFlags = Object.keys(yargsInstance.getOptions().default);
    var allowedFlags = [].concat(_toConsumableArray(customFlags), ['v', 'version', 'h', 'help', '$0', '_']);
    return Object.keys(parsedArgv).filter(function (key) {
      return !(0, _lodash.includes)(allowedFlags, key);
    });
  }

  function getPSConfigFilepath() {
    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        config = _ref2.config;

    if (config) {
      return config;
    }
    return _findUp2.default.sync('package-scripts.js') || _findUp2.default.sync('package-scripts.yml') || _findUp2.default.sync('package-scripts.yaml');
  }
}

function getPSConfig(parsedArgv) {
  if (parsedArgv.require) {
    (0, _binUtils.preloadModule)(parsedArgv.require);
  }
  var configFilepath = parsedArgv.config;
  if (!configFilepath) {
    log.warn({
      message: _chalk2.default.yellow('Unable to find a config file and none was specified.'),
      ref: 'unable-to-find-config'
    });
    return undefined;
  }
  return (0, _binUtils.loadConfig)(configFilepath, parsedArgv._);
}

function shouldExitProcess(rawArgv) {
  return !((0, _lodash.isEqual)(rawArgv, ['-h']) || (0, _lodash.isEqual)(rawArgv, ['--help']));
}