'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.specificHelpScript = exports.loadConfig = exports.preloadModule = exports.getModuleRequirePath = exports.help = exports.initialize = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _path = require('path');

var _fs = require('fs');

var _lodash = require('lodash');

var _typeDetect = require('type-detect');

var _typeDetect2 = _interopRequireDefault(_typeDetect);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _jsYaml = require('js-yaml');

var _commonTags = require('common-tags');

var _getLogger = require('../get-logger');

var _getLogger2 = _interopRequireDefault(_getLogger);

var _resolveScriptObjectToString = require('../resolve-script-object-to-string');

var _getScriptByPrefix = require('./get-script-by-prefix');

var _getScriptByPrefix2 = _interopRequireDefault(_getScriptByPrefix);

var _initialize = require('./initialize');

var _initialize2 = _interopRequireDefault(_initialize);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var log = (0, _getLogger2.default)();

/**
 * Attempts to load the given module. This is used for the
 * --require functionality of the CLI
 * @param  {String} moduleName The module to attempt to require
 * @return {*} The required module
 */
var preloadModule = getAttemptModuleRequireFn(function (moduleName, requirePath) {
  log.warn({
    message: _chalk2.default.yellow(_commonTags.oneLine`
        Unable to preload "${moduleName}".
        Attempted to require as "${requirePath}"
      `),
    ref: 'unable-to-preload-module'
  });
  return undefined;
});

var loadJSConfig = getAttemptModuleRequireFn(function onFail(configPath, requirePath, err) {
  if (err) {
    throw err;
  }
  log.error({
    message: _chalk2.default.red(_commonTags.oneLine`
        Unable to find JS config at "${configPath}".
      `),
    ref: 'unable-to-find-config'
  });
  return undefined;
});

/**
 * Attempts to load the config and logs an error if there's a problem
 * @param {String} configPath The path to attempt to require the config from
 * @param {*} input the input to pass to the config if it's a function
 * @return {Object} The config
 */
// eslint-disable-next-line complexity
function loadConfig(configPath, input) {
  var config = void 0;
  if (configPath.endsWith('.yml') || configPath.endsWith('.yaml')) {
    config = loadYAMLConfig(configPath);
  } else {
    config = loadJSConfig(configPath);
  }

  if ((0, _lodash.isUndefined)(config)) {
    // let the caller deal with this
    return config;
  }
  var typeMessage = `Your config data type was`;
  if ((0, _lodash.isFunction)(config)) {
    config = config(input);
    typeMessage = `${typeMessage} a function which returned`;
  }
  var emptyConfig = (0, _lodash.isEmpty)(config);
  var plainObjectConfig = (0, _lodash.isPlainObject)(config);
  if (plainObjectConfig && emptyConfig) {
    typeMessage = `${typeMessage} an object, but it was empty`;
  } else {
    typeMessage = `${typeMessage} a data type of "${(0, _typeDetect2.default)(config)}"`;
  }
  if (!plainObjectConfig || emptyConfig) {
    log.error({
      message: _chalk2.default.red(_commonTags.oneLine`
          The package-scripts configuration
          ("${configPath.replace(/\\/g, '/')}") must be a non-empty object
          or a function that returns a non-empty object.
        `),
      ref: 'config-must-be-an-object'
    });
    throw new Error(typeMessage);
  }

  var defaultConfig = {
    options: {
      'help-style': 'all'
    }
  };

  return _extends({}, defaultConfig, config);
}

exports.initialize = _initialize2.default;
exports.help = help;
exports.getModuleRequirePath = getModuleRequirePath;
exports.preloadModule = preloadModule;
exports.loadConfig = loadConfig;
exports.specificHelpScript = specificHelpScript;

/****** implementations ******/

function loadYAMLConfig(configPath) {
  try {
    return (0, _jsYaml.safeLoad)((0, _fs.readFileSync)(configPath, 'utf8'));
  } catch (e) {
    if (e.constructor.name === 'YAMLException') {
      throw e;
    }
    log.error({
      message: _chalk2.default.red(`Unable to find YML config at "${configPath}".`),
      ref: 'unable-to-find-config'
    });
    return undefined;
  }
}

/**
 * Determines the proper require path for a module.
 * If the path starts with `.` then it is resolved with process.cwd()
 * @param  {String} moduleName The module path
 * @return {String} the module path to require
 */
function getModuleRequirePath(moduleName) {
  return moduleName[0] === '.' ? require.resolve((0, _path.resolve)(process.cwd(), moduleName)) : moduleName;
}

function getAttemptModuleRequireFn(onFail) {
  return function attemptModuleRequire(moduleName) {
    var requirePath = void 0;
    try {
      requirePath = getModuleRequirePath(moduleName);
    } catch (e) {
      return onFail(moduleName);
    }
    try {
      return requireDefaultFromModule(requirePath);
    } catch (e) {
      return onFail(moduleName, requirePath, e);
    }
  };
}

/**
 * Requires the given module and returns the `default` if it's an `__esModule`
 * @param  {String} modulePath The module to require
 * @return {*} The required module (or it's `default` if it's an `__esModule`)
 */
function requireDefaultFromModule(modulePath) {
  /* eslint global-require:0,import/no-dynamic-require:0 */
  var mod = require(modulePath);
  if (mod.__esModule) {
    return mod.default;
  } else {
    return mod;
  }
}

function scriptObjectToChalk(options, _ref) {
  var name = _ref.name,
      description = _ref.description,
      script = _ref.script;

  var coloredName = _chalk2.default.green(name);
  var coloredScript = _chalk2.default.gray(script);
  var line = [coloredName];
  var showScript = true;
  if (typeof options !== 'undefined' && options['help-style'] === 'basic') {
    showScript = false;
  }
  if (description) {
    line.push(_chalk2.default.white(description));
  }
  if (showScript) {
    line.push(coloredScript);
  }
  return line.join(' - ').trim();
}

function help(_ref2) {
  var scripts = _ref2.scripts,
      options = _ref2.options;

  var availableScripts = getAvailableScripts(scripts);
  var filteredScripts = availableScripts.filter(function (script) {
    return !script.hiddenFromHelp;
  });
  if (filteredScripts.length > 0) {
    var scriptLines = filteredScripts.map(scriptObjectToChalk.bind(null, options || { 'help-style': 'all' }));
    var topMessage = 'Available scripts (camel or kebab case accepted)';
    var message = `${topMessage}\n\n${scriptLines.join('\n')}`;
    return message;
  } else {
    return _chalk2.default.yellow('There are no scripts available');
  }
}

function specificHelpScript(config, scriptName) {
  var script = (0, _getScriptByPrefix2.default)(config, scriptName);
  if ((0, _lodash.isNull)(script)) {
    return _chalk2.default.yellow(`Script matching name ${scriptName} was not found.`);
  } else {
    return scriptObjectToChalk({ 'help-style': 'all' }, script);
  }
}

function getAvailableScripts(config) {
  var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var rootLevel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

  var excluded = ['description', 'script'];
  if (!rootLevel) {
    excluded.push('default');
  }
  return Object.keys(config).reduce(function (scripts, key) {
    var val = config[key];
    if ((0, _lodash.includes)(excluded, key)) {
      return scripts;
    }
    var scriptObj = (0, _resolveScriptObjectToString.resolveScriptObjectToScript)(val);
    var prefixed = [].concat(_toConsumableArray(prefix), [key]);
    if (scriptObj) {
      var description = scriptObj.description,
          script = scriptObj.script,
          _scriptObj$hiddenFrom = scriptObj.hiddenFromHelp,
          hiddenFromHelp = _scriptObj$hiddenFrom === undefined ? false : _scriptObj$hiddenFrom;

      scripts = [].concat(_toConsumableArray(scripts), [{ name: prefixed.join('.'), description, script, hiddenFromHelp }]);
    }
    if ((0, _lodash.isPlainObject)(val)) {
      return [].concat(_toConsumableArray(scripts), _toConsumableArray(getAvailableScripts(val, prefixed, false)));
    }
    return scripts;
  }, []);
}