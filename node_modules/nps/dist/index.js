'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _spawnCommandWithKill = require('spawn-command-with-kill');

var _spawnCommandWithKill2 = _interopRequireDefault(_spawnCommandWithKill);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _commonTags = require('common-tags');

var _lodash = require('lodash');

var _findUp = require('find-up');

var _managePath = require('manage-path');

var _managePath2 = _interopRequireDefault(_managePath);

var _arrify = require('arrify');

var _arrify2 = _interopRequireDefault(_arrify);

var _getScriptToRun = require('./get-script-to-run');

var _getScriptToRun2 = _interopRequireDefault(_getScriptToRun);

var _getScriptsFromConfig = require('./get-scripts-from-config');

var _getScriptsFromConfig2 = _interopRequireDefault(_getScriptsFromConfig);

var _getLogger = require('./get-logger');

var _getLogger2 = _interopRequireDefault(_getLogger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

var NON_ERROR = 0;

exports.default = runPackageScripts;


function runPackageScripts(_ref) {
  var scriptConfig = _ref.scriptConfig,
      scripts = _ref.scripts,
      _ref$options = _ref.options,
      options = _ref$options === undefined ? {} : _ref$options;

  if (scripts.length === 0) {
    scripts = ['default'];
  }
  var scriptNames = (0, _arrify2.default)(scripts);

  var separatorIndex = scriptNames.indexOf('--');
  if (separatorIndex >= 0) {
    var additionalOptions = scriptNames.slice(separatorIndex + 1).join(' ');
    if (separatorIndex === 0) {
      scriptNames = [`default ${additionalOptions}`];
    } else {
      scriptNames.splice(separatorIndex);
      var lastIndex = scriptNames.length - 1;
      scriptNames[lastIndex] = `${scriptNames[lastIndex]} ${additionalOptions}`;
    }
  }

  return scriptNames.reduce(function (res, input) {
    return res.then(function () {
      return runPackageScript({ scriptConfig, options, input });
    });
  }, Promise.resolve());
}

function runPackageScript(_ref2) {
  var scriptConfig = _ref2.scriptConfig,
      options = _ref2.options,
      input = _ref2.input;

  var _input$split = input.split(' '),
      _input$split2 = _toArray(_input$split),
      scriptPrefix = _input$split2[0],
      args = _input$split2.slice(1);

  var scripts = (0, _getScriptsFromConfig2.default)(scriptConfig, scriptPrefix);

  var _ref3 = (0, _getScriptToRun2.default)(scripts, scriptPrefix) || {},
      scriptName = _ref3.scriptName,
      script = _ref3.script;

  if (!(0, _lodash.isString)(script)) {
    return Promise.reject({
      message: _chalk2.default.red(_commonTags.oneLine`
          Scripts must resolve to strings.
          There is no script that can be resolved from "${scriptPrefix}"
        `),
      ref: 'missing-script'
    });
  }
  var command = [script].concat(_toConsumableArray(args)).join(' ').trim();
  var log = (0, _getLogger2.default)((0, _getLogger.getLogLevel)(options));
  var showScript = options.scripts;
  log.info(_commonTags.oneLine`
    ${_chalk2.default.gray('nps is executing')}
     \`${_chalk2.default.bold(scriptName)}\`
     ${showScript ? `: ${_chalk2.default.green(command)}` : ''}
  `);
  var child = void 0;
  return new Promise(function (resolve, reject) {
    child = (0, _spawnCommandWithKill2.default)(command, { stdio: 'inherit', env: getEnv() });

    child.on('error', function (error) {
      reject({
        message: _chalk2.default.red(_commonTags.oneLine`
            The script called "${scriptPrefix}"
            which runs "${command}" emitted an error
          `),
        ref: 'emitted-an-error',
        error
      });
    });

    child.on('close', function (code) {
      if (code === NON_ERROR) {
        resolve(code);
      } else {
        reject({
          message: _chalk2.default.red(_commonTags.oneLine`
              The script called "${scriptPrefix}"
              which runs "${command}" failed with exit code ${code}
            `),
          ref: 'failed-with-exit-code',
          code
        });
      }
    });
  });
}

function getEnv() {
  var env = (0, _lodash.clone)(process.env);
  var alterPath = (0, _managePath2.default)(env);
  var npmBin = (0, _findUp.sync)('node_modules/.bin');
  if (npmBin) {
    alterPath.unshift(npmBin);
  }
  return env;
}